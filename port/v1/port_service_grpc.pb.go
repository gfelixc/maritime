// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/port_service.proto

package portv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortDomainService_CreateOrUpdateFromPortsDataFile_FullMethodName = "/port.v1.PortDomainService/CreateOrUpdateFromPortsDataFile"
)

// PortDomainServiceClient is the client API for PortDomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortDomainServiceClient interface {
	CreateOrUpdateFromPortsDataFile(ctx context.Context, in *CreateOrUpdateFromPortsDataFileRequest, opts ...grpc.CallOption) (*CreateOrUpdateFromPortsDataFileResponse, error)
}

type portDomainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortDomainServiceClient(cc grpc.ClientConnInterface) PortDomainServiceClient {
	return &portDomainServiceClient{cc}
}

func (c *portDomainServiceClient) CreateOrUpdateFromPortsDataFile(ctx context.Context, in *CreateOrUpdateFromPortsDataFileRequest, opts ...grpc.CallOption) (*CreateOrUpdateFromPortsDataFileResponse, error) {
	out := new(CreateOrUpdateFromPortsDataFileResponse)
	err := c.cc.Invoke(ctx, PortDomainService_CreateOrUpdateFromPortsDataFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortDomainServiceServer is the server API for PortDomainService service.
// All implementations must embed UnimplementedPortDomainServiceServer
// for forward compatibility
type PortDomainServiceServer interface {
	CreateOrUpdateFromPortsDataFile(context.Context, *CreateOrUpdateFromPortsDataFileRequest) (*CreateOrUpdateFromPortsDataFileResponse, error)
	mustEmbedUnimplementedPortDomainServiceServer()
}

// UnimplementedPortDomainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortDomainServiceServer struct {
}

func (UnimplementedPortDomainServiceServer) CreateOrUpdateFromPortsDataFile(context.Context, *CreateOrUpdateFromPortsDataFileRequest) (*CreateOrUpdateFromPortsDataFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateFromPortsDataFile not implemented")
}
func (UnimplementedPortDomainServiceServer) mustEmbedUnimplementedPortDomainServiceServer() {}

// UnsafePortDomainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortDomainServiceServer will
// result in compilation errors.
type UnsafePortDomainServiceServer interface {
	mustEmbedUnimplementedPortDomainServiceServer()
}

func RegisterPortDomainServiceServer(s grpc.ServiceRegistrar, srv PortDomainServiceServer) {
	s.RegisterService(&PortDomainService_ServiceDesc, srv)
}

func _PortDomainService_CreateOrUpdateFromPortsDataFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateFromPortsDataFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortDomainServiceServer).CreateOrUpdateFromPortsDataFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortDomainService_CreateOrUpdateFromPortsDataFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortDomainServiceServer).CreateOrUpdateFromPortsDataFile(ctx, req.(*CreateOrUpdateFromPortsDataFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortDomainService_ServiceDesc is the grpc.ServiceDesc for PortDomainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortDomainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port.v1.PortDomainService",
	HandlerType: (*PortDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateFromPortsDataFile",
			Handler:    _PortDomainService_CreateOrUpdateFromPortsDataFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/port_service.proto",
}
